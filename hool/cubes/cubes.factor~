! Copyright (C) 2019 Jack Lucas
! See http://factorcode.org/license.txt for BSD license.
USING: assocs kernel combinators accessors locals
math.vectors vectors sequences math combinators.short-circuit arrays fry classes.struct continuations words sequences.generalizations ;
IN: hool.cubes

! Cube Helpers
TUPLE: cube { loc initial: { 0 0 0 } }
    { dim initial: { 0 0 0 } } ;

: <cube> ( loc dim  -- cube )
    cube boa ;

: cube-bounds ( cube -- loc dim )
    [ loc>> ] [ dim>> ] bi ; inline

: cube-extent ( cube -- loc ext )
    cube-bounds over v+ ; inline

: with-cube-extents ( ..a+b cube1 cube2 loc-quot: ( ..a loc1 loc2 -- ..c ) ext-quot: ( ..b ext1 ext2 -- ..d ) -- ..c+d )
    [ [ cube-extent ] bi@ ] 2dip bi-curry* bi* ; inline

: (cube-intersect) ( cube cube -- array array )
    [ vmax ] [ vmin ] with-cube-extents ;

: point>cube ( loc -- cube )
    { 0 0 0 } <cube> ; inline


GENERIC: contains-cube? ( cube1 cube2 -- ? )

! Factors version of contains-rect? only provides the intersectionary rectangle
! We write a version of cube that checks if the entire cube2 is in cube1
M: cube contains-cube? ( cube1 cube2 -- ? )
    dup [ (cube-intersect) ] dip
    cube-bounds [ dup ] dip v+
    [ swap ] dip
    = [ = ] dip and ;

: contains-point? ( point cube -- ? )
    [ point>cube ] dip contains-cube? ;

: cube-containing ( points -- cube )
    [ vsupremum ] [ vinfimum ] bi [ nip ] [ v- ] 2bi <cube> ;


    
